1.JS中的object类型与python中的字典或者json很像，不同的地方在于能够定义方法，通过方法名来访问方法的具体类容，通过方法名()来执行方法。
2.JS的数据类型有Number、String、Array、Object、Boolen等，可以声明的是动态的变量。
3.JS的显示输出有4中形式，document.write()嵌入包含开闭符号的语句，innerHTML= 修改已有的开闭段文本，console.log() 打印输出，
window.alert() 弹出提示框。
4.JS的函数不用定义返回指的类型，这点和python很像。
5.变量的生命周期：局部变量会在函数运行以后被删除，全局变量会在页面关闭后被删除。和其他语言一样
6.如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性。
7.非严格模式下给未声明变量赋值创建的全局变量（在window上定义），是全局对象的可配置属性，可以使用delete删除，使用var声明的就不能删除。
8.常用的html事件有onchange、onclick、onload、onmouseover、onmouseout、onkeydown。事件主要是来源于DOM。
9.字符串也可以通过索引来访问，通过str.length来访问字符串长度。length 还能用来访问Array的元素个数。
10.字符串也是对象，可以通过new来创建，这点和c#很像，但是一般不用。 typeof str 可以查看数据类型。
11.字符串能用的方法和c#的也很像，有substring、replace、索引定位、连接字符串等。
12.运算符以及比较符号和C#基本一致。反斜杠\同样能够去掉特殊符号意义。"  \" demo\"   "
13.for 循环 if 语句 switch语句和C#语法一致，但是需要注意有一个for/in循环能够通过属性名称访问object。
不过可以为循环命名，例如outerloop: for (var i = 0; i < 10; i++){}，目的是控制循环。
14.document.write()的执行在加载完页面之后时，会将已加载的页面重写。基本不用当需要ajax的时候使用innnerHTML
15.continue 语句（带有或不带标签引用）只能用在循环中；break 语句（不带标签引用），只能用在循环或 switch 中。
通过标签引用，break 语句可用于跳出任何 JavaScript 代码块。有了标签，可以使用break和continue在多层循环的时候控制外层循环。
16.“===”表示严格相等，判断值类型的时候首先是判断数据类型是否相等，引用类型则是判断引用地址。false ==='0' //fasle
“==”类似于普通的相等，会有数据转换比较，一般不会对比较变量本身产生影响（除非toString或valueOf方法被覆写成特定用途了）。false == '0'//true
17.undefined 和null都能清空对象，一般使用null主动释放对象，undefined表示变量声明过但并未赋过值。
18.Number() 转换为数字， String() 转换为字符串，tostring()也可以， Boolean() 转化为布尔值。object转化为字符串是[object object]。.parseFloat() .parseInt()
19.Date 方法：getDay() getDate() getFullYear() getHours() getSeconds() getMonth()  等
20. Regular Expression 语法： /正则表达式主体/修饰符(可选)，通常用于两个字符串方法 : search() 和 replace()。
i  执行对大小写不敏感的匹配，g 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
21.
方括号用于查找某个范围内的字符：
表达式 	描述
[abc] 	查找方括号之间的任何字符。
[0-9] 	查找任何从 0 至 9 的数字。
(x|y) 	查找任何以 | 分隔的选项。
元字符是拥有特殊含义的字符：
元字符 	描述
\d 	查找数字。
\s 	查找空白字符。
\b 	匹配单词边界。
\uxxxx 	查找以十六进制数 xxxx 规定的 Unicode 字符。
量词:
量词 	描述
n+ 	匹配任何包含至少一个 n 的字符串。
n* 	匹配任何包含零个或多个 n 的字符串。
n? 	匹配任何包含零个或一个 n 的字符串。
22.在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。
test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。
exec() 方法用于检索字符串中的正则表达式的匹配，该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。 
23.try catch finally throw 都和C#语法基本一致
24.JavaScript 中，函数及变量的声明都将被提升到函数的最顶部。 后面的变量前面使用不会报错，但是会是undefined。变量提升。
25.严格模式通过在脚本或函数的头部添加 use strict，严格模式下你不能使用未声明的变量。
26.return 语句不能断行， 在 JavaScript 中，分号是可选的 。由于 return 是一个完整的语句，所以 JavaScript 将关闭 return 语句。
27.在每个代码块中 JavaScript 不会创建一个新的作用域，一般各个代码块的作用域都是全局的。for语句中的var i =0；可以在循环后读到值，不是undefined。
该处和c# python都不一致。
28.js的表单验证有两部分 服务器数据验证和客户端数据验证，HTML5 新增了 HTML 表单的验证方式：约束验证（constraint validation）。
约束验证 HTML 输入属性
属性 	描述
disabled 	规定输入的元素不可用
max 	规定输入元素的最大值
min 	规定输入元素的最小值
pattern 	规定输入元素值的模式
required 	规定输入元素字段是必需的
type  	规定输入元素的类型
29.在输入限制是通过Validity实现，其中有rangeOverflow rangeUnderflow 等可选输出错误提示条件。 setCustomValidity() 可以设置提示的信息。
30.面向对象语言中 this 表示当前对象的一个引用。
但在 JavaScript 中 this 不是固定不变的，它会随着执行环境的改变而改变。
    在对象方法中，this 表示该方法所属的对象。
    如果单独使用，this 表示全局对象。
    在函数中，this 表示全局对象。
    在函数中，在严格模式下，this 是未定义的(undefined)。
    在 HTML 事件句柄中，this 表示接收事件的元素。
    apply 和 call 允许切换函数执行的上下文环境（context），即 this 绑定的对象，可以将 this 引用到任何对象。
最后一个解释：person1.fullName.call(person2);   使用了person1里面的方法，但是调用了person2里面的参数。
var person1 = {
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
}
var person2 = {
  firstName:"John",
  lastName: "Doe",
}
person1.fullName.call(person2);  // 返回 "John Doe"
31.函数内声明的变量是局部的，但是{}块内声明的确是全局的，例如在循环条件语句块中。现在在新加了let来取代var，使得在{}中的变量的值不能在{}外使用，
使用 let 关键字声明的全局作用域变量不属于 window 对象。
32.const 的本质: const 定义的变量并非常量，并非不可变，它定义了一个常量引用一个值。使用 const 定义的对象或者数组，其实是可变的，声明时必须进行初始化。值类型不可变，引用类型可变。
const 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的。
33.json （ javascript object notation）   
JSON 语法规则：数据为 键/值 对，都有双引号；数据由逗号分隔；大括号保存对象；方括号保存数组。 注意：多行显示要不使用+ “”'' ,要不就是使用\反斜杠。
var text = '{ "sites" : [' +
	'{ "name":"Runoob" , "url":"www.runoob.com" },' +
	'{ "name":"Google" , "url":"www.google.com" },' +
	'{ "name":"Taobao" , "url":"www.taobao.com" } ]}';	

var text = '{ "sites" : [{ "name":"Runoob" , "url":"www.runoob.com" },\
{ "name":"Google" , "url":"www.google.com" },\
{ "name":"Taobao" , "url":"www.taobao.com" } ]}';

obj = JSON.parse(text);
document.getElementById("demo").innerHTML = obj.sites[1].name + "   " + obj.sites[1].url;
//Google   www.google.com
JSON.stringify()	用于将 JavaScript 值转换为 JSON 字符串。
34.javascript:void(alert('Warning!!!'))中void方法会执行但是会返回值为0；
<a href="javascript:void(0)">单击此处什么也不会发生</a>
href="#"与href="javascript:void(0)"的区别
# 包含了一个位置信息，默认的锚是#top 也就是网页的上端。
而javascript:void(0), 仅仅表示一个死链接。
在页面很长的时候会使用 # 来定位页面的具体位置，格式为：# + id。
35.js使用setTimeout实现异步，setTimeout(callbackfunc , MS),第一个参数是回调函数，第二个参数是休眠时间。使用在主线程中不会发生阻塞。
除了 setTimeout 函数以外，异步回调广泛应用于 AJAX 编程。
36.Promise 构造函数只有一个参数，是一个函数，这个函数在构造之后会直接被异步运行，所以我们称之为起始函数。起始函数包含两个参数 resolve 和 reject。
resolve 和 reject 都是函数，其中调用 resolve 代表一切正常，reject 是出现异常时所调用的。
Promise 类有 .then() .catch() 和 .finally() 三个方法，这三个方法的参数都是一个函数，.then() 可以将参数中的函数添加到当前 Promise 的正常执行序列，
.catch() 则是设定 Promise 的异常处理序列，.finally() 是在 Promise 执行的最后一定会执行的序列。 .then() 传入的函数会按顺序依次执行，
有任何异常都会直接跳到 catch 序列
resolve() 中可以放置一个参数用于向下一个 then 传递一个值，then 中的函数也可以返回一个值传递给 then。但是，如果 then 中返回的是一个 Promise 对象，
那么下一个 then 将相当于对这个返回的 Promise 进行操作。reject() 参数中一般会传递一个异常给之后的 catch 函数用于处理异常。
但是请注意以下两点：
    resolve 和 reject 的作用域只有起始函数，不包括 then 以及其他序列；
    resolve 和 reject 并不能够使起始函数停止运行，别忘了 return。
异步函数 async function 中可以使用 await 指令，await 指令后必须跟着一个 Promise，异步函数会在这个 Promise 运行中暂停，直到其运行结束再继续运行。
37.函数实现可以通过匿名函数的形式，使用函数表达式，函数存储在变量中，不需要函数名称，通常通过变量名来调用。
var myFunction = function (a, b) {return a * b};
var x = myFunction(4, 3);
通过构造函数实现：
var myFunction = new Function("a", "b", "return a * b");
var x = myFunction(4, 3);
在 JavaScript 中，很多时候，你需要避免使用 new 关键字。
38.函数也可以使用lamda表达式  const x = (x, y) => { return x * y };
39.js的可选参数es6中：
function myFunction(x, y = 10) {
    // y is 10 if not passed or undefined
    return x + y;
}
myFunction(0, 2) // 输出 2
myFunction(5); // 输出 15, y 参数的默认值
也可直接使用JavaScript 函数有个内置的对象 arguments 对象。
函数在定义时，可以不设置形参：
x = findMax(1, 123, 500, 115, 44, 88);
function findMax() {
    var i, max = arguments[0];
    if(arguments.length < 2) return max;
    for (i = 0; i < arguments.length; i++) {
        if (arguments[i] > max) {
            max = arguments[i];
        }
    }
    return max;
}
40.call() 和 apply() 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。
两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。
41.所有函数都能访问全局变量。JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。 
42.闭包就是能够读取其他函数内部变量的函数，通过函数嵌套的方式。闭包可以用在许多地方，
它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。
原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，
不会在调用结束后，被垃圾回收机制（garbage collection）回收。
1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。
解决方法是，在退出函数之前，将不使用的局部变量全部删除。
2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），
把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。
回调的根本就是垃圾未回收，未回收的原因时是，通过在外部直接引用内部函数导致外部函数被间接引用，这使得外部函数的局部变量不会被清除。
43.当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。 通过DOM，
    JavaScript 能够改变页面中的所有 HTML 元素
    JavaScript 能够改变页面中的所有 HTML 属性
    JavaScript 能够改变页面中的所有 CSS 样式
    JavaScript 能够对页面中的所有事件做出反应
44.查找元素： 未找到返回null
var x=document.getElementById("intro"); 
var x=document.getElementsByClassName("intro");
var y=document.getElementsByTagName("p");
45.改变HTML的内容使用：document.getElementById(id).innerHTML = 新内容
改变属性使用：document.getElementById(id).attribute=新属性值
改变CSS样式使用： document.getElementById(id).style.property=新样式
55.为HTML添加事件，不知可以通过元素属性设置，也可以通过addEventListener() 方法用于向指定元素添加事件句柄。
element.addEventListener(event, function, useCapture)   element.detachEvent(event, function);
IE 8 及更早 IE 版本，Opera 7.0及其更早版本不支持 addEventListener() 和 removeEventListener() 方法。 有解决方案，通过判断兼容。
第一个参数是事件的类型 (如 "click" 或 "mousedown")，注意不要使用on。
第二个参数是事件触发后调用的函数。
第三个参数是个布尔值用于描述事件是冒泡还是捕获。默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。
56.事件传递有两种方式：冒泡与捕获。
在 冒泡 中，内部元素的事件会先被触发，然后再触发外部元素。
在 捕获 中，外部元素的事件会先被触发，然后才会触发内部元素的事件。
57.DOM 节点（元素）
新增部分
var para = document.createElement("p"); //创建一个新节点
var node = document.createTextNode("这是一个新的段落。"); //创建节点内容
para.appendChild(node); //将节点内容添加到元素
var element = document.getElementById("div1");  //搜寻已有的节点
element.appendChild(para); //将新节点添加到已有节点中，添加新元素到尾部

var child = document.getElementById("p1");  //搜寻已有节点
element.insertBefore(para, child); //将新节点添加到element大节点中的child小节点的前面。

删除部分
parent.removeChild(child); // 从parent节点中移除child节点
child.parentNode.removeChild(child); //删除节点必须知道父节点
替换部分
parent.replaceChild(para, child); //新节点替换旧节点
58. DOM 集合（collection）
getElementsByTagName()  //返回像一个数组，HTMLCollection 无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。
var c = document.forms;		//这是 form 元素的一个 HTMLCollection 对象
var firstform = c[0];		//能够以数字数组来使用
var lastform = c[c.length-1];	//length 属性返回元素数
var address = c["address"];		//能够以关联数组来使用
var address = c.address;		//JavaScript 允许这样的表示法
59.NodeList
var myNodeList = document.querySelectorAll("p"); //NodeList 对象是一个从文档中获取的节点列表。
NodeList 只能通过索引来获取。只有 NodeList 对象有包含属性节点和文本节点。
60.prototype （原型）
function Person(first, last, age, eyecolor) {
 this.firstName = first;
 this.lastName = last;
 this.age = age;
 this.eyeColor = eyecolor;
} //这个函数是一个构造器函数  可以把他看着是C#的类，调用实现实例化
当需要添加类（对象）的属性是可以：
Person.prototype.nationality = "English";
也可以重写 Person.prototype={};
61.如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0x，则解释为十六进制数。Number.toFixed()等指定小数点格式
var a=123; b=a.toFixed(2); // b="123.00"
62.Math类方法
document.write(Math.round(4.7)); //round 四舍五入
document.write(Math.random()); //介于0-1之间的随机小数
document.write(Math.floor(Math.random()*11));  //介于0-11之间的随机整数
63.当使用构造函数创造正则对象时，需要常规的字符转义规则（在前面加反斜杠 \）。比如，以下是等价的：
var re = new RegExp("\\w+");
var re = /\w+/;
64.浏览器对象模型  browser object model (BOM) 使 JavaScript 有能力与浏览器"对话"。所有浏览器都支持 window 对象。
window.screen对象在编写时可以不使用 window 这个前缀。
一些属性：
    screen.availWidth - 可用的屏幕宽度  以像素计，减去界面特性，比如窗口任务栏。
    screen.availHeight - 可用的屏幕高度

    location.hostname 返回 web 主机的域名
    location.pathname 返回当前页面的路径和文件名
    location.port 返回 web 主机的端口 （80 或 443）
    location.protocol 返回所使用的 web 协议（http: 或 https:）
window.location.assign(url) ： 加载 URL 指定的新的 HTML 文档。 就相当于一个链接，跳转到指定的url，
当前页面会转为新页面内容，可以点击后退返回上一个页面。
window.location.replace(url) ： 通过加载 URL 指定的文档来替换当前文档 ，这个方法是替换当前窗口页面，
前后两个页面共用一个窗口，所以是没有后退返回上一页的  
    history.back() - 与在浏览器点击后退按钮相同   // go() 里面的参数表示跳转页面的个数 例如 history.go(1) 表示前进一个页面
    history.forward() - 与在浏览器中点击向前按钮相同  // go() 里面的参数表示跳转页面的个数 例如 history.go(-1) 表示后退一个页面
    // go() 里面的参数为0,表示刷新页面
    window.navigator 对象包含有关访问者浏览器的信息。
    提示框prompt()    提示框经常用于提示用户在进入页面前输入某个值,无值是返回null
    警告框alert()
    确认框confirm()   当你点击 "确认", 确认框返回 true， 如果点击 "取消", 确认框返回 false。
    \n 换行
65.计时时间 setTimeout  clearTimeout   setInterval  clearInterval。
66.用 let 或 const 声明的变量和常量不会被提升！
67.XMLHttpRequest 是 AJAX 的基础。 语法如下
var xmlhttp;
if (window.XMLHttpRequest)
{
    //  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码
    xmlhttp=new XMLHttpRequest();
}
else
{
    // IE6, IE5 浏览器执行代码
    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
}
68.请求
如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：
xmlhttp.open("GET","ajax_info.txt",true); 第一个参数：请求类型  第二个参数:文件位置URL  第三个参数：是否异步
xmlhttp.send();  只一个参数，在post装在下使用，string表示发送的数据
如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：
xmlhttp.open("POST","/try/ajax/demo_post2.php",true);
xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xmlhttp.send("fname=Henry&lname=Ford");
setRequestHeader(header,value) 	向请求添加 HTTP 头。    header: 规定头的名称    value: 规定头的值
当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数  //类似于回调函数
xmlhttp.onreadystatechange=function()
{
    if (xmlhttp.readyState==4 && xmlhttp.status==200)
    {
        document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
    }
}
69.响应  有两种形式
responseText 	获得字符串形式的响应数据。
responseXML 	获得 XML 形式的响应数据。
当为text的时候可以正常的读写打印出来，分片。。。。
当为xml的时候可以通过：
xmlDoc=xmlhttp.responseXML;
txt="";
x=xmlDoc.getElementsByTagName("ARTIST");
for (i=0;i<x.length;i++)
{
    txt=txt + x[i].childNodes[0].nodeValue + "<br>";  //具体使用数据可以通过浏览器的console来查看。
}
document.getElementById("myDiv").innerHTML=txt;
70.当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。
存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
xmlhttp.readyState的值及解释：

0：请求未初始化（还没有调用 open()）。

1：请求已经建立，但是还没有发送（还没有调用 send()）。

2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。

3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。

4：响应已完成；您可以获取并使用服务器的响应了。

xmlhttp.status的值及解释：

100——客户必须继续发出请求

101——客户要求服务器根据请求转换HTTP协议版本

200——交易成功

201——提示知道新文件的URL

202——接受和处理、但处理未完成

203——返回信息不确定或不完整

204——请求收到，但返回信息为空

205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件

206——服务器已经完成了部分用户的GET请求

300——请求的资源可在多处得到

301——删除请求数据

302——在其他地址发现了请求数据

303——建议客户访问其他URL或访问方式

304——客户端已经执行了GET，但文件未变化

305——请求的资源必须从服务器指定的地址得到

306——前一版本HTTP中使用的代码，现行版本中不再使用

307——申明请求的资源临时性删除

400——错误请求，如语法错误

401——请求授权失败

402——保留有效ChargeTo头响应

403——请求不允许

404——没有发现文件、查询或URl

405——用户在Request-Line字段定义的方法不允许

406——根据用户发送的Accept拖，请求资源不可访问

407——类似401，用户必须首先在代理服务器上得到授权

408——客户端没有在用户指定的饿时间内完成请求

409——对当前资源状态，请求不能完成

410——服务器上不再有此资源且无进一步的参考地址

411——服务器拒绝用户定义的Content-Length属性请求

412——一个或多个请求头字段在当前请求中错误

413——请求的资源大于服务器允许的大小

414——请求的资源URL长于服务器允许的长度

415——请求资源不支持请求项目格式

416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段

417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求

合起来

500——服务器产生内部错误

501——服务器不支持请求的函数

502——服务器暂时不可用，有时是为了防止发生系统过载

503——服务器过载或暂停维修

504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长

505——服务器不支持或拒绝支请求头中指定的HTTP版本
1xx:信息响应类，表示接收到请求并且继续处理
2xx:处理成功响应类，表示动作被成功接收、理解和接受
3xx:重定向响应类，为了完成指定的动作，必须接受进一步处理
4xx:客户端错误，客户请求包含语法错误或者是不能正确执行
5xx:服务端错误，服务器不能正确执行一个正确的请求
xmlhttp.readyState==4 && xmlhttp.status==200的解释：请求完成并且成功返回
71.同源策略的关键在于数据拥有者是否愿意让请求者获得数据。为了安全使用了同源策略，当需要跨域访问数据时，使用cors设置允许访问的http 和 Header，
或者使用jsonp方式，利用script不受同源策略影响，利用calbackfunction实现，但是只限于get方法。
72.defer与async的区别
前者要等到整个页面正常渲染结束，才会执行；
后者一旦下载完，渲染引擎就会中断渲染，执行这个脚本以后，再继续渲染
一句话，defer是“渲染完再执行”，async是“下载完就执行”
另外，如果有多个defer脚本，会按照它们在页面出现的顺序加载，而多个async脚本是不能保证加载顺序的
73.HTML中使用 ES6
浏览器加载 ES6 模块，也使用<script>标签，但是要加入type="module"属性
type="module" 等同于打开了<script>标签的defer属性
    代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见
    模块脚本自动采用严格模式，不管有没有声明use strict
    模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用export命令输出对外接口
    模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的
    同一个模块如果加载多次，将只执行一次
    利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在 ES6 模块之中
74.WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，与Ajax轮询 相比起来显然后者这样会浪费很多的带宽等资源。
75.有点奇怪npm与js nodejs之间的关系  npm包管理器为什么能够 npm start 
76.通过三种方式实现了websocket通信 
方法1：使用websocketd.exe实现，使用的脚本种类较多，包括nodejs php bash 等
方法2：express和express-ws 实现 
方法3： pywebsocket3实现