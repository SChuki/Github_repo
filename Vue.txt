1.使用 new Vue({})新建vue实例，通过el与对用的元素相联系。
2.使用 v-bind:和{{}}双大括号语法在html中绑定变量。v-bind 是绑定属性值 例如 id class，简写为 : 。
3.使用 v-on: 和 @ 语法绑定函数到标签的事件。
4.使用 v-model: 语法使用户的页面输入反向传递回vue实例变量，双向数据绑定。和input元素连用 还有多选 复选 下拉等配合
5.改变页面显示，只需要改变数据就可以，Vue会自动帮助更新
6.Vue是面向数据的编程
7.方法写在methods中
8.数据写在data中
9.可以使用v-text 和v-html属性来实现数据绑定，区别在于v-html发生转译
10.数据的绑定和页面显示也可以通过写在template里面的html语句实现。
11.Vue实例化后只服务于挂载点和挂载点中的内容，就是el元素。
12.var vm = new Vue({ el: '#vue_det', data: data})  可以通过vm.$el  和vm.$data实现访问
13.利用v-if 和 template元素可以实现区域控制。
14.可以通过过滤器filters对数据的格式进行控制。{{ message | capitalize }}  <div v-bind:id="rawId | formatId"></div>
同时，过滤器可以接受传入参数{{ message | filterA('arg1', arg2) }} ，这里，message 是第一个参数，
字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。
同时，过滤器支持连用 {{ message | filterA | filterB }}。
15. <div v-if="Math.random() > 0.5">   //v-if 和 v-else-if、v-else的连用
	  Sorry
      </div>
      <div v-else-if="Math.random() > 0.3">
	  But sorry
      </div>
      <div v-else>
	  Not sorry
      </div>
16. v-show可以实现元素的显示和隐藏，bool值
17.v-for循环语句 
 <template v-for="site in sites">
      <li>{{ site.name }}</li>
      <li>--------------</li>
   </template>
   
    <ul>
    <li v-for="n in 10">
     {{ n }}
    </li>
    </ul>
18.computed vue的计算属性   有点类似于data和methods的结合  返回的就是一个值 通过函数计算出来的。
  computed: {
    // 计算属性的 getter
    reversedMessage: function () {
      // `this` 指向 vm 实例
      return this.message.split('').reverse().join('')
    }
我们可以使用 methods 来替代 computed，效果上两个都是一样的，但是 computed 是基于它的依赖缓存，
只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。 
19.computed 属性默认只有 getter ，不过在需要时你也可以提供一个 setter 。
20. 监听属性  watch可以查看vm中参数变化  有nval和oval自动分配。
vm.$watch('counter', function(nval, oval) {
    alert('计数器值的变化 :' + oval + ' 变为 ' + nval + '!');
});
21. 绑定元素类型 多类型
v-bind:class="{ 'active': isActive , 'text-danger': hasError}">  设置对应的布尔值
<div v-bind:class="[activeClass, errorClass]"></div>  也可以通过数组绑定classvalue
<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }">菜鸟教程</div> 同样也可以通过数组实现单个或多个绑定
22.v-on事件修饰符， 可以串联修饰符用 . 
<!-- click 事件只能点击一次 -->
<a v-on:click.once="doThis"></a>
<!-- 只有在 keyCode 是 enter 时调用 vm.submit() -->  等多种按键用法  也可以通过串联使用多个组合键控制
<input v-on:keyup.enter="submit">
23.Vue的组件功能很强大，可以看作是整体元素的copy，自定义组件类似于c#中的自定义控件。
24.// 注册一个全局自定义指令 v-focus   
Vue.directive('focus', {
  // 当绑定元素插入到 DOM 中。
  inserted: function (el) {
    // 聚焦元素
    el.focus()
  }
})
也可以定义一个局部的指令
// 创建根实例
new Vue({
  el: '#app',
  directives: {
    // 注册一个局部的自定义指令 v-focus
    focus: {
      // 指令的定义
      inserted: function (el) {
        // 聚焦元素
        el.focus()
      }
    }
  }
})
//钩子函数：钩子函数是在一个事件触发的时候，在系统级捕获到了他，然后做一些操作。
一段用以处理系统消息的程序。“钩子”就是在某个阶段给你一个做某些处理的机会。
//指令函数提供了一些钩子函数参数，比如像何时调用函数，指定函数名称等
25.注意VUE中变量的位置，定义在组件中是相互独立的，定义在全局是相关组件都受影响。
26.混入 (mixins)定义了一部分可复用的方法或者计算属性。混入对象可以包含任意组件选项。
当组件使用混入对象时，所有混入对象的选项将被混入该组件本身的选项。
如果 methods 选项中有相同的函数名，则 Vue 实例优先级会较高。可以看做是对js的重写。
也可以全局注册混入对象。注意使用！ 一旦使用全局混入对象，将会影响到 所有 之后创建的 Vue 实例。
使用恰当时，可以为自定义对象注入处理逻辑。
27.vue的生命周期
总共有8各阶段 
一、创建前/后：
① beforeCreate阶段，实例的挂载元素el和数据对象data都为undefined，未初始化。
② created阶段，vue实例的数据对象data有了，el为undefined，未初始化。
二、载入前/后：
③ beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。
④ mounted阶段，vue实例挂载完成，data渲染成功。
三、更新前/后：当data变化时，会触发
⑤ beforeUpdate和⑥ updated方法
四、销毁前/后：
⑦ beforeDestroy 销毁前
⑧ destroy 销毁执行后，对data的改变不会再触发周期函数，此时vue实例已经解除了事件监听以及和dom的绑定，
但是dom结构依然存在

created:在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图。
mounted:在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。
methods 是Vue实例对象上绑定的方法，供当前Vue组件作用域内使用，未调用不会执行，只执行逻辑，返回值可有可无。
computed 是计算属性，也可以理解为一个方法。其中计算的结果如果不发生改变就不会触发，且必须返回一个值并在DOM中绑定的才能取得值。
他可以自动获取数据的改变。
watch 属性是手动定义的所需监听的值，不同的数据可以在其中多次定义监听值，这会消耗一定性能，并不能像computed那样自动改变。
28.vue-resource 可以实现异步加载
29.Vue 可以添加数据动态响应接口。例如使用watch来监控数据变化